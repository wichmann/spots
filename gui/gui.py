
"""
Main GUI for SPotS.

Main window was generated by calling:
    pyuic4 main_window.ui > main_window.py
    
Created on Sat Oct 18 17:09:11 2014

@author: Christian Wichmann
"""


import logging
from PyQt4 import QtGui
from PyQt4 import QtCore

from main_window import Ui_MainWindow

from spots import plc
from spots import config


__all__ = ['start_gui']


logger = logging.getLogger('spots.gui')


APP_NAME = 'SPotS'


class SpotsGui(QtGui.QMainWindow, Ui_MainWindow):
    """Main window for SPotS"""
    def __init__(self, parent=None):
        """Initialize main window for SPotS."""
        logger.info('Building main window of SPotS...')
        QtGui.QMainWindow.__init__(self, parent)
        self.setupUi(self)
        # set internal state variables
        self.current_output_image = dict()
        self.current_input_image = dict()
        self.current_program = ''
        self.currently_running_plc = False
        # build main window
        self.setup_widgets()
        self.center_on_screen()
        self.set_signals_and_slots()
        self.update_lists()
        self.setup_plc_timer()

    def setup_widgets(self):
        self.highlighter = IecStHighlighter(self.source_code_editor.document())
        # line number and character offset for last error or an empty tuple if
        # no error is currently present
        self.highlighter.current_error_coordinates = tuple()

    def center_on_screen(self):
        """Centers the window on the screen."""
        screen = QtGui.QDesktopWidget().screenGeometry()
        size = self.geometry()
        self.move((screen.width() - size.width()) / 2,
                  (screen.height() - size.height()) / 2)

    def set_signals_and_slots(self):
        """Sets all signals and slots for main window."""
        self.actionQuit.triggered.connect(QtGui.qApp.quit)
        self.execute_button.clicked.connect(self.on_execute_button)
        # change list items
        self.input_list_view.doubleClicked.connect(self.on_change_input)
        self.output_list_view.doubleClicked.connect(self.on_change_output)
        self.controller_list_view.doubleClicked.connect(self.on_change_controller)
        # delete list items
        self.remove_controller_button.clicked.connect(self.on_delete_controller)
        self.remove_input_button.clicked.connect(self.on_delete_input)
        self.remove_output_button.clicked.connect(self.on_delete_output)

    def setup_plc_timer(self):
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.run_plc)
        self.timer.start(config.DEFAULT_CYCLE_TIME_MS)

    def run_plc(self):
        try:
            if self.current_program:
                self.current_input_image = plc.read_input_bits()
                self.current_output_image = plc.process_input_to_output(self.current_program,
                                                                        self.current_input_image)
                plc.write_output_bits(self.current_output_image)
                self.statusbar.showMessage('Running...')
            else:
                self.statusbar.showMessage('Stopped...')
        except SyntaxError as e:
            self.error_message_label.setText('{} on character {} in line {}'.format(e.message, e.offset, e.lineno))
            self.highlighter.current_error_coordinates = (e.lineno, e.offset)
            self.statusbar.showMessage('Syntax error in program. Stopped...')
            return
        except KeyError as e:
            self.error_message_label.setText('Unknown input/output used: {}'.format(e.message))
            self.statusbar.showMessage('Unknown input/output used. Stopped...')
            return
        self.error_message_label.setText('')
        self.update_inputs_and_outputs()

    @QtCore.pyqtSlot()
    def on_execute_button(self):
        self.current_program = str(self.source_code_editor.toPlainText())
        self.run_plc()

    def update_inputs_and_outputs(self):
        input_string = ''
        for k, v in sorted(self.current_input_image.iteritems()):
            input_string += '{:<5}: \t{}\n'.format(k, v)
        self.input_text_edit.setText(input_string)
        output_string = ''
        for k, v in sorted(self.current_output_image.iteritems()):
            output_string += '{:<5}: \t{}\n'.format(k, v)
        self.output_text_edit.setText(output_string)

    @QtCore.pyqtSlot()
    def on_change_input(self):
        print('lllll')

    @QtCore.pyqtSlot()
    def on_change_output(self):
        print('jjjj')

    @QtCore.pyqtSlot()
    def on_change_controller(self):
        print('mmmm')

    @QtCore.pyqtSlot()
    def on_add_input(self):
        print('lllll')

    @QtCore.pyqtSlot()
    def on_add_output(self):
        print('jjjj')

    @QtCore.pyqtSlot()
    def on_add_controller(self):
        print('mmmm')
        
    @QtCore.pyqtSlot()
    def on_delete_input(self):
        for item in self.input_list_view.selectedItems():
            name = str(item.text().split(' -> ')[0])
            del config.INPUT_BITS[name]
            self.input_list_view.takeItem(self.input_list_view.row(item))
            print(config.INPUT_BITS)

    @QtCore.pyqtSlot()
    def on_delete_output(self):
        for item in self.output_list_view.selectedItems():
            name = str(item.text().split(' -> ')[0])
            del config.OUTPUT_BITS[name]
            self.output_list_view.takeItem(self.output_list_view.row(item))
            print(config.OUTPUT_BITS)

    @QtCore.pyqtSlot()
    def on_delete_controller(self):
        for item in self.controller_list_view.selectedItems():
            del plc.CONTROLLER[item.controller_id]
            self.controller_list_view.takeItem(self.controller_list_view.row(item))
            print(plc.CONTROLLER)

    def update_lists(self):
        for k, c in plc.CONTROLLER.items():
            item = QtGui.QListWidgetItem(str(c))
            item.controller_id = k
            self.controller_list_view.addItem(item)
        for name, location in config.INPUT_BITS.items():
            string = '{} -> {}'.format(name, location)
            self.input_list_view.addItem(QtGui.QListWidgetItem(string))
        for name, location in config.OUTPUT_BITS.items():
            string = '{} -> {}'.format(name, location)
            self.output_list_view.addItem(QtGui.QListWidgetItem(string))


class InputOutputDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(InputOutputDialog, self).__init__(parent)
        self.setup_widgets()

    def setup_widgets(self):
        pass

    
class IecStHighlighter(QtGui.QSyntaxHighlighter):
    """Provides syntac highlighting for IEC 61131-3 ST source code. Only some
    of the syntax is currently supported!

    Code of this class stolen from pyQt example file!
    """
    def __init__(self, parent=None):
        super(IecStHighlighter, self).__init__(parent)
        self.setup_formats()

    def setup_formats(self):
        keywordFormat = QtGui.QTextCharFormat()
        keywordFormat.setForeground(QtCore.Qt.darkBlue)
        keywordFormat.setFontWeight(QtGui.QFont.Bold)

        keywordPatterns = ["\\btrue\\b", "\\bfalse\\b", "\\band\\b",
                           "\\bor\\b", "\\bnot\\b"]

        self.highlightingRules = [(QtCore.QRegExp(pattern), keywordFormat)
                for pattern in keywordPatterns]

        input_format = QtGui.QTextCharFormat()
        input_format.setFontWeight(QtGui.QFont.Bold)
        input_format.setForeground(QtCore.Qt.red)
        self.highlightingRules.append((QtCore.QRegExp("[I][0-9]+"),
                input_format))

        output_format = QtGui.QTextCharFormat()
        output_format.setFontWeight(QtGui.QFont.Bold)
        output_format.setForeground(QtCore.Qt.blue)
        self.highlightingRules.append((QtCore.QRegExp("[O][0-9]+"),
                output_format))

        self.error_format = QtGui.QTextCharFormat()
        self.error_format.setBackground(QtCore.Qt.yellow)

        singleLineCommentFormat = QtGui.QTextCharFormat()
        singleLineCommentFormat.setForeground(QtCore.Qt.green)
        self.highlightingRules.append((QtCore.QRegExp("//[^\n]*"),
                singleLineCommentFormat))

        self.multiLineCommentFormat = QtGui.QTextCharFormat()
        self.multiLineCommentFormat.setForeground(QtCore.Qt.green)

        quotationFormat = QtGui.QTextCharFormat()
        quotationFormat.setForeground(QtCore.Qt.darkGreen)
        self.highlightingRules.append((QtCore.QRegExp("\".*\""),
                quotationFormat))

        functionFormat = QtGui.QTextCharFormat()
        functionFormat.setFontItalic(True)
        functionFormat.setForeground(QtCore.Qt.blue)
        self.highlightingRules.append((QtCore.QRegExp("\\b[A-Za-z0-9_]+(?=\\()"),
                functionFormat))

        self.commentStartExpression = QtCore.QRegExp("\(\\*")
        self.commentEndExpression = QtCore.QRegExp("\\*\)")

    def highlightBlock(self, text):
        # add all other highlight
        for pattern, format in self.highlightingRules:
            expression = QtCore.QRegExp(pattern)
            index = expression.indexIn(text)
            while index >= 0:
                length = expression.matchedLength()
                self.setFormat(index, length, format)
                index = expression.indexIn(text, index + length)
        # add block comment highlight
        self.setCurrentBlockState(0)
        startIndex = 0
        if self.previousBlockState() != 1:
            startIndex = self.commentStartExpression.indexIn(text)
        while startIndex >= 0:
            endIndex = self.commentEndExpression.indexIn(text, startIndex)
            if endIndex == -1:
                self.setCurrentBlockState(1)
                commentLength = len(text) - startIndex
            else:
                commentLength = endIndex - startIndex + self.commentEndExpression.matchedLength()
            self.setFormat(startIndex, commentLength,
                    self.multiLineCommentFormat)
            startIndex = self.commentStartExpression.indexIn(text,
                    startIndex + commentLength);


def start_gui():
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName(APP_NAME)

    main = SpotsGui()
    main.show()

    sys.exit(app.exec_())


if __name__ == "__main__":
    start_gui()
